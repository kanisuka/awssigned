[
{
	"uri": "/ko/",
	"title": "파일 트래픽 최적화 아키텍처 구성",
	"tags": [],
	"description": "",
	"content": "Serverless 기반 Signed URL 실습 워크샵   Serverless based Signed URL Architecture   이 워크샵을 통해서, AWS 클라우드 환경에서 S3 Pre-signed URL과 CloudFront Signed URL를 사용하여 파일 업로드 및 다운로드를 작업을 수행하는 방법을 배우게 됩니다.\n"
},
{
	"uri": "/ko/introduction/upload/",
	"title": "이미지 파일 업로드",
	"tags": [],
	"description": "",
	"content": " S3 Upload Pre-signed URL 발급 S3에 직접 업로드하기 위한 S3 Upload Pre-signed URL을 발급합니다. 해당 과정은 API Gateway와 Lambda Function을 통해서 REST API 형태로 발급 요청하고, 요청을 받은 Upload URL Generator Lambda Function이 S3 SDK를 통해서 S3 Upload용 Pre-signed URL을 생성합니다.\n위 과정은 아래와 같은 순서로 진행됩니다.\n 클라이언트는 API Gateway에서 제공하는 REST API 호출 API Gateway는 해당 요청을 Upload URL Gen Lambda Function으로 전달 및 S3 Upload Pre-signed URL 생성 Pre-signed URL 생성 후, Dynamo DB에 업로드할 파일에 대한 메타데이터 저장 및 S3 Pre-signed URL을 클라이언트에게 전달  이렇게 생성된 S3 Pre-signed URL은 클라이언트에게 전달되고, 클라이언트는 아래 과정을 통해 업로드 작업을 수행합니다.\n S3에 이미지 파일을 업로드하기 앞서 발급받은 S3 Upload Pre-signed URL을 호출하면서, 이미지 파일을 HTTP Request Body에 포함시켜 업로드 작업을 수행합니다.\n"
},
{
	"uri": "/ko/introduction/download/",
	"title": "이미지 파일 다운로드",
	"tags": [],
	"description": "",
	"content": " CloudFront Download Signed URL 발급 S3에 업로드한 파일을 다운받기 위해서는 다양한 방법들이 존재합니다. S3에서 제공하는 Pre-signed URL을 통해서도 다운로드를 받을 수 있지만, AWS에서 제공하는 CDN 서비스인 CloudFront를 통해 고속으로 파일을 다운로드 받는 방법에 대해서 알아봅니다.\n위 과정은 아래와 같은 순서로 진행됩니다.\n 클라이언트는 API Gateway에서 제공하는 REST API 호출 API Gateway는 해당 요청을 Download URL Gen Lambda Function으로 전달 및 CloudFront Download Signed URL 생성  이렇게 생성된 Signed URL은 클라이언트에게 전달되고, 클라이언트는 아래 과정을 통해 다운로드 작업을 수행합니다.\n CloudFront로부터 이미지 파일을 다운로드받기 앞서 발급받은 CloudFront Download Signed URL을 호출하면, 해당 요청을 받은 CloudFront는 S3로부터 요청한 바이너리 파일을 받아와서 캐싱 정책에 따라 CloudFront에 캐싱을 한 뒤에 클라이언트에게 해당 이미지 파일을 전달합니다.\n"
},
{
	"uri": "/ko/introduction/thumbnail/",
	"title": "썸네일 다운로드",
	"tags": [],
	"description": "",
	"content": " CloudFront Thumbnail Download Signed URL 발급 기존 대부분의 방식들은 이미지 파일을 업로드할 때, 썸네일을 생성하도록 진행되었습니다. 그러나 이미지가 업로드할 때마다 썸네일을 강제로 생성하도록 하면, 생성된 썸네일 이미지가 사용자 (클라이언트)에 의해 사용되지 않을 경우에는 쓸데 없이 S3 스토리지 비용만 차지하는 경우가 발생될 수 있습니다.\n업로드된 이미지에 대한 썸네일이 항상 사용되지 않고, 일부만 사용하는 경우에는 사용자 (클라이언트)로부터 썸네일 요청이 발생될 때만 실시간으로 생성해서 사용자에게 전달하도록 진행합니다. 더 나아가, 생성된 썸네일은 S3에 저장하지 않고, CloudFront에 일정 시간 동안 캐싱을 하도록 하여 S3 스토리지 비용을 더욱 줄이면서, 동시에 캐싱된 시간동안 썸네일 요청에 대해 빠르게 썸네일을 전달할 수 있습니다.\n위 과정은 아래와 같은 순서로 진행됩니다.\n 클라이언트는 API Gateway에서 제공하는 REST API 호출 API Gateway는 해당 요청을 Thumbnail URL Gen Lambda Function으로 전달 및 CloudFront Signed URL 생성  이렇게 생성된 CloudFront Signed URL은 클라이언트에게 전달되고, 클라이언트는 아래 과정을 통해 썸네일 다운로드 작업을 수행합니다.\n CloudFront로부터 썸네일 다운로드 받기 앞서 발급받은 CloudFront Thumbnail Download Signed URL을 호출하면, 해당 요청을 받은 CloudFront는 S3로부터 원본 이미지 바이너리 파일을 받아와서 CloudFront Lambda@Edge Function을 통해서 원본 이미지 파일을 썸네일로 변환합니다. CloudFront는 이렇게 변환된 썸네일 파일을 캐싱 정책에 따라 캐싱을 하고, 클라이언트에게 생성된 썸네일 이미지 파일을 전달합니다.\n한 가지 주의할 점은 썸네일을 요청하는 첫 번 째 호출에 대해서는 썸네일 생성 시간이 포함되기 때문에 느릴 수 있습니다. 그러나 두 번 째 호출부터는 생성된 썸네일 이미지 파일이 CloudFront에 캐싱되어 있기 때문에 빠르게 다운로드 받을 수 있습니다.\n"
},
{
	"uri": "/ko/introduction/streaming_upload/",
	"title": "동영상 파일 업로드",
	"tags": [],
	"description": "",
	"content": " 동영상 파일 업로드 과정은 앞서 설명드린 이미지 파일 업로드 과정과 동일하게 진행합니다. 차이점은 동영상 파일이 S3에 업로드 되면 자동으로 스트리밍을 위한 HLS 파일 생성과 동영상 파일에 특정 화면에 대한 썸네일 생성 작업이 추가로 진행됩니다.\n S3 Upload Pre-signed URL 발급 S3에 직접 업로드하기 위한 S3 Upload Pre-signed URL을 발급합니다. 해당 과정은 API Gateway와 Lambda Function을 통해서 REST API 형태로 발급 요청하고, 요청을 받은 Upload URL Generator Lambda Function이 S3 SDK를 통해서 S3 Upload용 Pre-signed URL을 생성합니다.\n위 과정은 아래와 같은 순서로 진행됩니다.\n 클라이언트는 API Gateway에서 제공하는 REST API 호출 API Gateway는 해당 요청을 Upload URL Gen Lambda Function으로 전달 및 S3 Upload Pre-signed URL 생성 Pre-signed URL 생성 후, Dynamo DB에 업로드할 파일에 대한 메타데이터 저장 및 S3 Pre-signed URL을 클라이언트에게 전달  이렇게 생성된 S3 Pre-signed URL은 클라이언트에게 전달되고, 클라이언트는 아래 과정을 통해 업로드 작업을 수행합니다.\n S3에 동영상 파일을 업로드 및 스트리밍 파일 생성하기 앞서 발급받은 S3 Upload Pre-signed URL을 호출하면서, 동영상 파일을 HTTP Request Body에 포함시켜 업로드 작업을 수행합니다. 동영상 파일이 S3에 업로드 완료되면, Media Conver Lambda Function이 트리거링 되면서 업로드된 동영상 파일을 스트리밍할 수 있는 HLS 파일들과 업로드된 동영상 파일의 특정 화면을 썸네일로 만들어서 S3에 저장하게 됩니다.\n"
},
{
	"uri": "/ko/introduction/streaming_download/",
	"title": "동영상 파일 스트리밍",
	"tags": [],
	"description": "",
	"content": " CloudFront Signed Cookies 발급 앞에서 동영상 파일을 S3에 업로드하면서 트리거링된 Media Convert Lambda Function을 통해 생성된 스트리밍 파일들을, 인증된 호출을 통해 다운받아서 스트리밍 서비스를 제공하기 위해서 CloudFront에서 제공하는 Signed Cookies를 사용합니다.\nStreaming URL Gen Lambda Function은 스트리밍 파일을 다운로드 받을 수 있는 m3u8 파일 주소와 해당 파일 및 일련의 호출되는 파일들을 접근하여 다운로드 받을 수 있도록 Signed Cookies 값을 제공합니다.\n위 과정은 아래와 같은 순서로 진행됩니다.\n 클라이언트는 API Gateway에서 제공하는 REST API 호출 API Gateway는 해당 요청을 Streaming URL Gen Lambda Function으로 전달 및 CloudFront Signed Cookies 값 및 Streaming 호출에 대한 Endpoint 파일 주소 생성  이렇게 생성된 Signed Cookies 값 및 Streaming 호출에 대한 Endpoint 파일 주소는 클라이언트에게 전달되고, 클라이언트는 아래 과정을 통해 스트리밍 파일을 다운로드 받을 수 있습니다.\n CloudFront로부터 스트리밍 파일을 다운로드받기 앞서 발급받은 Streaming Endpoint 주소를 호출할 때, 위 과정을 통해 발급 받은 CloudFront Signed Cookies 값을 HTTP 요청에 함께 설정해서 CloudFront로 전달합니다. CloudFront는 전달 받은 Signed Cookies 값이 Valid한 지 여부를 체크하고, 유효한 요청이면 Origin으로 설정되어 있는 S3로부터 다운로드 받아서 클라이언트에게 전달합니다.\n클라이언트는 일반적으로 HLS 스트리밍을 제공해줄 수 있는 스트리밍 플레이어이고, 해당 스트리밍 플레이어는 첫 번 째 요청 이후로 일련된 HTTP 스트리밍 호출을 진행합니다. 이 때도 위 과정을 통해 발급은 Signed Cookies 값을 함께 전달 해주어야 합니다.\n"
},
{
	"uri": "/ko/introduction/",
	"title": "시나리오 소개",
	"tags": [],
	"description": "",
	"content": " 본 실습은 S3 및 CloudFront Signed URL을 이용하여 S3에 파일 업로드 및 다운로드를 수행하도록 서비스를 구성하는 것이 목적입니다. 또한, 해당 작업들을 API Gateway, Lambda, DynamoDB 등과 같이 서버리스 아키텍처를 통해 구성하고, 개발 환경은 SAM (Serverless Architecture Model)을 IDE (e.g., Intellij, VS Code, Cloud 9 등)에 연동시켜서 작업을 진행합니다.\n S3 Pre-signed URL을 통한 이미지 업로드 구현  CloudFront Signed URL을 통한 다운로드 구현  CloudFront Lambda@Edge를 이용하여 실시간 썸네일 다운로드 구현  S3 Pre-signed URL을 통한 동영상 업로드 구현  CloudFront Signed Cookies를 통한 HLS 스트리밍 구현   "
},
{
	"uri": "/ko/setup/",
	"title": "실습 환경 소개",
	"tags": [],
	"description": "",
	"content": " 본 실습은 AWS에서 제공하는 SAM (Serverless Architecture Model) 을 사용하여 필요한 리소스 생성 및 테스트, 배포 등과 같은 작업을 진행합니다.\n 본 실습은 SAM을 통해서 AWS 서버리스 환경을 구축하고, AWS 서버리스 환경 기반에서 파일 트래픽을 효율적으로 다룰 수 있는 방법을 학습하는 것이 목적입니다. 더 나아가, 이미지에 대한 실시간 썸네일 생성이나 동영상 파일을 스트리밍 형태로 변환하여 AWS를 사용하여 손 쉽게 해당 서비스들을 구축하도록 진행합니다.\n"
},
{
	"uri": "/ko/lab-setup/",
	"title": "실습 환경 구성",
	"tags": [],
	"description": "",
	"content": "본 실습을 구성하기 위해서, 계정 생성부터 IAM 생성, SAM 프로젝트 생성을 위한 AWS Toolkit 설치 등과 같은 작업을 진행합니다.\n AWS 계정 및 IAM 사용자 생성 AWS Toolkit 플러그인 설치 IDE에 Region 정보 및 AWS Crendential 정보 설정  "
},
{
	"uri": "/ko/lab-setup/account/",
	"title": "계정 생성",
	"tags": [],
	"description": "",
	"content": "AWS 계정  이미 AWS 계정을 가지고 있다면 즉시 이 실습의 가이드를 따라 진행할 수 있으나, 계정이 없다면 먼저 AWS 계정을 만들어야 합니다.\n AWS 계정 생성 및 활성화 가이드는 다음 링크 를 참조하시기 바랍니다.\n실습은 ap-northeast-2 (SEOUL) 리전을 선택합니다.\n IAM 사용자 AWS 계정을 생성했지만 직접 IAM 사용자를 생성하지 않은 경우, IAM 콘솔을 사용하여 IAM 사용자를 생성 할 수 있습니다. 다음 스텝에 따라 Administrator (관리자) 사용자를 생성합니다. 이미 관리자 사용자가 있다면, 다음 IAM 사용자 생성 작업을 건너 뜁니다.\n AWS 계정 이메일 주소와 비밀번호를 사용하여 AWS 계정의 Root 사용자로 IAM 콘솔 에 로그인 합니다. IAM 콘솔 왼쪽 메뉴 패널에서 Users (사용자)를 선택한 다음 Add user (사용자 추가)를 클릭합니다. User name (사용자 이름)은 Administrator로 입력합니다. Programmatic access와 AWS Management Console access 체크박스를 선택하고, Custom password를 선택한 다음 비빌번호를 입력합니다. Next: Permissions (다음: 권한)을 클릭합니다.  Attach existing policies directly (기존 정책 직접 연결)를 선택하고 AdministratorAccess 정책에 체크박스를 선택하고 Next: Tags (다음: 태그)를 클릭합니다.  Next: Review (다음: 검토)를 클릭합니다. Administrator 사용자에 AdministratorAccess 관리형 정책이 추가 된 것을 확인하고 Create user (사용자 만들기)를 클릭합니다. 이제 Root 사용자를 로그아웃하고 새로 생성한 Administrator 사용자로 로그인을 합니다. 다음 URL을 사용하여 로그인 할 수 있습니다.   https://\u0026lt;your_aws_account_id\u0026gt;.signin.aws.amazon.com/console/\n\u0026lt;your_aws_account_id\u0026gt;는 본인 AWS 계정의 고유 ID를 입력합니다. Root 사용자로는 해당 실습을 진행할 때 에러가 발생할 수 있습니다. 반드시 admin 유저 계정으로 로그인하여 진행하세요.\n  "
},
{
	"uri": "/ko/lab-setup/toolkit/",
	"title": "개발 환경 설정",
	"tags": [],
	"description": "",
	"content": "AWS Toolkit 설치 SAM을 이용하여 작업을 진행하기 위해서는 자신이 원하는 IDE Tool에 AWS Toolkit을 설치해서 코드 개발 후에 바로 배포할 수 있도록 진행합니다.\n워크샵은 기본적으로 Intellij IDE를 사용해서 작업을 진행합니다. 설치 순서는 아래를 참조하세요.\n 먼저, AWS SAM CLI 를 설치합니다. 다음으로, JetBrains Plugin Repository 를 통해 AWS Toolkit for Intellij를 설치 합니다. [Settings/Preferences] 대화상자에서 [Plugins]를 클릭하고 [Marketplace]를 선택한 다음 “AWS Toolkit”을 검색하고 [Install] 버튼을 클릭합니다. 그리고 변경 내용이 적용되도록 IDE를 다시 시작합니다.  Credential 정보 설정 SAM을 통해 배포 작업을 진행하기 위해서는 AWS 자격 증명(AWS Credential)정보가 로컬 AWS 구성 파일에 설정되어 있어야 합니다. 좀 더 자세한 설정 방법은 AWS 개발을 위한 AWS 자격 증명 및 리전 설정 문서 에서 확인 가능합니다.\n 로컬 시스템의 다음 위치에 있는 AWS 자격 증명 프로필 파일에서 자격 증명을 설정합니다.  Linux, macOS, or Unix의 ~/.aws/credentials Windows의 경우 C:\\Users\\USERNAME.aws\\credentials    이 파일에는 다음 형식의 행이 포함되어야 합니다.\n[default]\raws_access_key_id = your_access_key_id\raws_secret_access_key = your_secret_access_key\ryour_access_key_id 및 your_secret_access_key 값을 자신의 고유 AWS 자격 증명 값으로 대체합니다. 본 실습에서는 이전에 생성한 Administrator IAM 사용자의 고유 AWS 자격 증명 값을 사용합니다.\nIntellij에서는 이전에 설치한 AWS Toolkit에서 제공하는 메뉴를 통해서 손쉽게 구성이 가능합니다.\n 왼쪽 메뉴 하단에 존재하는 AWS Explorer를 선택합니다. AWS Explorer 창에서 Configure AWS Connection을 클릭합니다. Seoul Region을 선택하고, Edit AWS Credential 메뉴를 선택하여, AWS Credential 정보 (Access Key, Secret Access Key)를 파일에 입력하고 저장합니다.  "
},
{
	"uri": "/ko/file/serverless/sam/",
	"title": "SAM 프로젝트 생성",
	"tags": [],
	"description": "",
	"content": " 기본적으로 API Gateway, Lambda Function, Dynamo DB 등과 같은 자원은 SAM template을 통해서 자동으로 생성할 수 있습니다. 본 실습은 기 구현되어 있는 소스를 GIT으로부터 받아서 진행합니다.\n Intellij IDE 툴을 통해서, 아래 git 주소에 있는 소스를 다운로드 받습니다.\n[git url]\r다운로드 받은 SAM 프로젝트에서 S3Manager 파일을 선택합니다. 그리고, 아래 부분을 생성된 S3 버킷 및 CloudFront 도메인 값을 설정합니다.\nKEY_PAIR_ID와 PRIVATE_KEY는 root 계정으로 들어가서 생성합니다. 생성 방법은 AWS 공식 문서 를 참조하세요.\n Intellij IDE에서 template.yaml 파일을 선택하고, 마우스 오른쪽 클릭을 해서 Deploy Serverless Application을 선택합니다. 선택하면 아래와 같은 화면이 나타납니다.\n Create Stack에 signed-template을 넣어줍니다. S3 Bucket에서 Create 버튼을 클릭하여 aws-sam-signed-[특정 ID 값]으로 S3 Bucket을 생성합니다. 하단에 Deploy 버튼을 클릭하여 실행합니다.   Deploy 버튼을 클릭하면 아래와 같이 빌드 과정을 거치게 됩니다. 빌드 과정이 완료되면 AWS CloudFormation을 사용하여 AWS 서버리스 환경을 자동으로 구축하게 됩니다. CloudFormation이 정상적으로 동작 완료되면, AWS 서버리스 환경 구축이 완성되어 있을 것을 보실 수 있습니다.\n"
},
{
	"uri": "/ko/file/api-test/image/",
	"title": "이미지 API 테스트",
	"tags": [],
	"description": "",
	"content": " API 테스트는 POSTMAN 툴을 이용하여 진행합니다.\n 아래와 같이 포스트맨을 통해 File 업로드 Pre-Signed URL을 발급받을 수 있는 REST API를 호출합니다. 해당 REST API를 호출하면, 파일을 업로드할 수 있는 Pre-Signed URL이 HTTP 응답으로 전달됩니다.\nS3 Upload Pre-Signed URL 발급 API Gateway EndPoint는 SAM Template에 의해 생성된 API Gateway Endpoint를 의미합니다. 예를 들어, jsatf3u5x5.execute-api.ap-northeast-2.amazonaws.com/Prod 와 같은 값이 될 수 있습니다.\nMethod : GET\rURL : https://[API Gateway EndPoint]/nfile/object?uid=uid001\u0026amp;sid=sid001\u0026amp;name=myimage\r바이너리 파일 업로드 앞 서 발급받은 S3 Upload Pre-Signed URL(body 안에 url 값)을 복사해서 아래와 같이 주소창에 붙여 넣습니다. 그리고 Body 탭을 클릭한 후, binary 버튼을 클릭하여 업로드할 이미지 파일을 하나 첨부합니다.\nMethod : PUT\rURL : https://signed-img-myid.s3.ap-northeast-2.amazonaws.com/sid001/uid001/f24ed80c-c163-4e1e-8965-d88928375236?X-Amz-Security-Token=...\r만료된 URL을 통한 이미지 파일 업로드 발급 받은 S3 Upload Pre-Signed URL을 람다 함수에서 설정한 만료 시간 이후로 업로드 시도할 경우, 아래와 같이 Access Denied (Request has expired) 에러가 응답으로 내려오게 됩니다. 이미지 파일 다운로드 S3 Upload Pre-Signed URL을 발급받기 위해 호출한 API의 응답으로부터 objectid 값(e.g., f24ed80c-c163-4e1e-8965-d88928375216)을 가져와서 아래와 같이 설정합니다.\nMethod : GET\rURL : https://[API Gateway EndPoint]/nfile/object/[objectid]?uid=uid001\u0026amp;sid=sid001\r이미지 썸네일 다운로드 "
},
{
	"uri": "/ko/file/infra/cf/cf_file/",
	"title": "파일 다운로드용 CloudFront 생성",
	"tags": [],
	"description": "",
	"content": "CloudFront 메뉴로 진입하여 Create Distribution 버튼을 클릭합니다. Web 메뉴의 Get Started 버튼을 클릭합니다. CloudFront의 Signed URL 기능을 사용하여 파일을 다운로드 받기 위해 아래와 같은 설정 작업을 진행합니다. CloudFront의 Signed URL 및 Signed Cookies 기능을 더 자세히 알고자 하기 위해서는 AWS 공식 문서 를 참조하세요.\n 아래와 같이 CloudFront 설정 작업을 진행합니다.\n Origin Domain Name은 기존에 생성한 signed-img-[my_id] 버킷을 선택합니다. ([my_id]는 임의의 고유한 값을 입력합니다) Restrict Bucket Access는 Yes를 선택합니다. Origin Access Identity는 Use an Existing Identity를 선택합니다. Grant Read Permission on Bucket은 Yes를 선택합니다. Restric Viewer Access는 Yes를 선택합니다. 마지막으로 제일 밑에 존재하는 Create Distribution 버튼을 클릭합니다.  다음으로는 생성된 CloudFront에 비디오 관련 S3 버킷을 Origin으로 설정하는 작업을 진행하도록 합니다.\n 왼쪽 메뉴 목록 중, Distributions를 클릭합니다. 생성된 CloudFront의 ID를 클릭하여 설정 화면으로 진입합니다. Origins and origin Groups 메뉴를 클릭합니다. Create Origin 버튼을 클릭합니다. Origin Domain Name은 기존에 생성한 signed-video-[my_id] 버킷을 선택합니다. ([my_id]는 임의의 고유한 값을 입력합니다) Restric Viewer Access는 Yes를 선택합니다. Origin Access Identity는 Use an Existing Identity를 선택합니다. 마지막으로 제일 밑에 존재하는 Create 버튼을 클릭합니다.  업로드되는 동영상 파일로부터 HLS 스트리밍 포맷과 동영상 썸네일 파일이 추가로 생성됩니다. 이렇게 생성된 파일들에 접근하는 경로는 따로 구분해서 진행합니다.\n CloudFront의 Behaviors 탭을 선택합니다. Create Behavior 버튼을 클릭합니다.  아래와 같이 Path Pattern에 대한 설정 값들을 입력합니다.\n Path Pattern은 input/*을 입력합니다. Origin or Origin Group은 S3-signed-video-[my_id]를 선택합니다. Restric Viewer Access는 Yes를 선택합니다. 마지막으로 제일 밑에 존재하는 Create 버튼을 클릭합니다.   CloudFront의 Behaviors 탭을 선택합니다. Create Behavior 버튼을 클릭합니다. Path Pattern은 assets/*을 입력합니다. Origin or Origin Group은 S3-signed-video-[my_id]를 선택합니다. Restric Viewer Access는 Yes를 선택합니다. 마지막으로 제일 밑에 존재하는 Create 버튼을 클릭합니다.  "
},
{
	"uri": "/ko/file/",
	"title": "파일 처리 시스템 구축",
	"tags": [],
	"description": "",
	"content": " 이번 실습에서는 SAM Template을 사용하여 이미지 및 동영상 파일에 대한 업로드, 다운로드, 썸네일 생성, 동영상 스트리밍 처리를 할 수 있는 방법을 진행합니다. SAM Template을 통해 위 작업을 진행하기 위한 기본적인 Serverless 환경의 리소스들을 생성 및 배포 작업을 수행합니다.\n  4-1 S3 and CloudFront 생성  4-2 SAM 프로젝트 생성  4-3. API 테스트   "
},
{
	"uri": "/ko/file/serverless/thumb/cloud9/",
	"title": "Cloud9 설정",
	"tags": [],
	"description": "",
	"content": " 본 실습은 Virginia (us-east-1) 리전에서 Cloud9 IDE 툴을 사용하여 진행합니다.\n Cloud9 -\u0026gt; Your environments 로 접속하고, Create environment 버튼을 클릭합니다. Name에 ImageResize를 입력하고, Next 버튼을 클릭합니다. 기본 설정을 그대로 사용합니다. Next step 버튼을 클릭합니다. 마지막으로 Create environment 버튼을 클릭합니다. "
},
{
	"uri": "/ko/file/infra/",
	"title": "S3 &amp; CloudFront 생성",
	"tags": [],
	"description": "",
	"content": "본 실습은 실제 이미지 및 비디오 파일이 저장되는 2개의 S3 버킷 및 CloudFront를 생성하는 과정을 진행합니다.\n S3 이미지 파일 저장 버킷 및 비디오 파일 저장 버킷 생성 (2개 버킷 생성) CloudFront 파일 다운로드용 CDN 생성 CloudFront 이미지 썸네일 다운로드용 CDN 생성  "
},
{
	"uri": "/ko/file/infra/s3/",
	"title": "S3 생성",
	"tags": [],
	"description": "",
	"content": " 총 2개의 S3 버킷을 생성합니다.\n 이미지 관련 S3 버킷 생성 S3 메뉴로 들어가서, Create bucket 버튼을 눌러 S3 버킷 생성 작업을 진행합니다. 버킷명은 signed-img-[my_id]로 지정하여 생성합니다. [my_id]은 고유한 임의의 값을 입력합니다. Region은 ap-northeast-2 (Seoul region)을 선택합니다. Create bucket 버튼을 클릭하여 S3 버킷을 생성합니다. 비디오 관련 S3 버킷 생성 버킷명은 signed-video-[my_id]로 지정하여 생성합니다. [my_id]은 고유한 임의의 값을 입력합니다. 동일하게 Region은 ap-northeast-2 (Seoul region)을 선택합니다. Create bucket 버튼을 클릭하여 S3 버킷을 생성합니다. "
},
{
	"uri": "/ko/file/infra/cf/",
	"title": "CloudFront 생성",
	"tags": [],
	"description": "",
	"content": " 아래와 같이 총 2개의 CloudFront를 생성합니다.\n  파일 다운로드 용 CloudFront 생성  이미지 썸네일 다운로드 용 CloudFront 생성   Origin access identity 생성 2개의 CloudFront를 생성하기 전, 공통적으로 적용되는 Origin access identity를 먼저 생성합니다.\n CloudFront에서 왼쪽 메뉴에 존재하는 Origin access identity 메뉴를 선택합니다. Create Origin Access identity 버튼을 클릭합니다. 팝업창에 Comment로 access-identity-signed를 입력하고, Create 버튼을 클릭합니다.  "
},
{
	"uri": "/ko/file/serverless/thumb/lambda/",
	"title": "람다 생성",
	"tags": [],
	"description": "",
	"content": " 본 실습은 Virginia (us-east-1) 리전에서 Cloud9 IDE 툴을 사용하여 진행합니다.\n 화면에 보이는 Create Lambda Function\u0026hellip; 링크를 클릭합니다. Function Name 및 Application Name 모두 ImageResize로 입력합니다. Node.js를 선택하고, empty-nodejs를 선택합니다. 그리고 Next 버튼을 클릭합니다. Function trigger는 none으로 설정하고, Next 버튼을 클릭합니다. Next 버튼을 클릭합니다. Finish 버튼을 클릭합니다. 아래 코드를 복사해서 index.js 파일 내용과 교체해줍니다.\n'use strict';\rconst querystring = require('querystring'); // Don't install.\rconst AWS = require('aws-sdk'); // Don't install.\r// http://sharp.pixelplumbing.com/en/stable/api-resize/\rconst Sharp = require('sharp');\rconst S3 = new AWS.S3({\rsignatureVersion: 'v4',\rregion: 'ap-northeast-2' // 버킷을 생성한 리전 입력\r});\rconst BUCKET = 'signed-img-[my_id]' // Input your bucket\r// Image types that can be handled by Sharp\rconst supportImageTypes = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'tiff'];\rexports.handler = async(event, context, callback) =\u0026gt; {\rconst { request, response } = event.Records[0].cf;\rconst { uri } = request;\rconst ObjectKey = decodeURIComponent(uri).substring(1);\rconst params = querystring.parse(request.querystring);\r/**\r* ex) https://dilgv5hokpawv.cloudfront.net/dev/myimage.jpg\r* - ObjectKey: 'dev/myimage.jpg'\r*/\r// 크기 조절이 없는 경우 원본 반환.\r// indicate width, height, format and quality.\rconst w = '100'\rconst h = '100'\rconst q = '50'\rconst f = 'jpg'\rif (!(w || h)) {\rreturn callback(null, response);\r}\rconst extension = 'jpg'\rconst width = parseInt(w, 10) || null;\rconst height = parseInt(h, 10) || null;\rconst quality = parseInt(q, 10) || 100; // Sharp는 이미지 포맷에 따라서 품질(quality)의 기본값이 다릅니다.\rlet format = (f || extension).toLowerCase();\rlet s3Object;\rlet resizedImage;\r// 포맷 변환이 없는 GIF 포맷 요청은 원본 반환.\rif (extension === 'gif' \u0026amp;\u0026amp; !f) {\rreturn callback(null, response);\r}\r// Init format.\rformat = format === 'jpg' ? 'jpeg' : format;\rif (!supportImageTypes.some(type =\u0026gt; type === extension )) {\rresponseHandler(\r403,\r'Forbidden',\r'Unsupported image type', [{\rkey: 'Content-Type',\rvalue: 'text/plain'\r}],\r);\rreturn callback(null, response);\r}\r// Verify For AWS CloudWatch.\rconsole.log(`parmas: ${JSON.stringify(params)}`); // Cannot convert object to primitive value.\\\rconsole.log('S3 Object key:', ObjectKey)\rtry {\rs3Object = await S3.getObject({\rBucket: BUCKET,\rKey: ObjectKey\r}).promise();\rconsole.log('S3 Object:', s3Object);\r}\rcatch (error) {\rresponseHandler(\r404,\r'Not Found',\r'The image does not exist.', [{ key: 'Content-Type', value: 'text/plain' }],\r);\rreturn callback(null, response);\r}\rtry {\rresizedImage = await Sharp(s3Object.Body)\r.resize(width, height)\r.toFormat(format, {\rquality\r})\r.toBuffer();\r}\rcatch (error) {\rresponseHandler(\r500,\r'Internal Server Error',\r'Fail to resize image.', [{\rkey: 'Content-Type',\rvalue: 'text/plain'\r}],\r);\rreturn callback(null, response);\r}\r// 응답 이미지 용량이 1MB 이상일 경우 원본 반환.\rif (Buffer.byteLength(resizedImage, 'base64') \u0026gt;= 1048576) {\rreturn callback(null, response);\r}\rresponseHandler(\r200,\r'OK',\rresizedImage.toString('base64'), [{\rkey: 'Content-Type',\rvalue: `image/${format}`\r}],\r'base64'\r);\r/**\r* @summary response 객체 수정을 위한 wrapping 함수\r*/\rfunction responseHandler(status, statusDescription, body, contentHeader, bodyEncoding) {\rresponse.status = status;\rresponse.statusDescription = statusDescription;\rresponse.body = body;\rresponse.headers['content-type'] = contentHeader;\rif (bodyEncoding) {\rresponse.bodyEncoding = bodyEncoding;\r}\r}\rconsole.log('Success resizing image');\rreturn callback(null, response);\r};\rsharp 패키지 설치 cloud9 콘솔에서 아래와 같이 명령어를 입력합니다.\n cd ImageResize npm init -y npm i sharp   Lambda@Edge Role 변경  Lambda 함수에서 Permissions 선택 Execution Role에서 Role Name 리소스 클릭 Trust relationships에서 Edit trust relationship 선택 아래 권한으로 교체  {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Principal\u0026quot;: {\r\u0026quot;Service\u0026quot;: [\r\u0026quot;lambda.amazonaws.com\u0026quot;,\r\u0026quot;edgelambda.amazonaws.com\u0026quot;\r]\r},\r\u0026quot;Action\u0026quot;: \u0026quot;sts:AssumeRole\u0026quot;\r}\r]\r}\r Update trust policy 클릭 Permmisions Tab으로 이동 Attach Policies -\u0026gt; Create Policy -\u0026gt; JSON 선택 아래 Policy Copy \u0026amp; Paste Review Policy 클릭 Name에는 LambdaExecutionImageResizeRole 입력 Create policy 버튼 클릭 Lambda 실행할 Role로 돌아와서, 위 Policy 연결  {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Sid\u0026quot;: \u0026quot;VisualEditor0\u0026quot;,\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;iam:CreateServiceLinkedRole\u0026quot;,\r\u0026quot;lambda:GetFunction\u0026quot;,\r\u0026quot;lambda:EnableReplication\u0026quot;,\r\u0026quot;cloudfront:UpdateDistribution\u0026quot;,\r\u0026quot;s3:GetObject\u0026quot;,\r\u0026quot;logs:CreateLogGroup\u0026quot;,\r\u0026quot;logs:CreateLogStream\u0026quot;,\r\u0026quot;logs:PutLogEvents\u0026quot;,\r\u0026quot;logs:DescribeLogStreams\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\rLambda@Edge 함수 배포 (to CloudFront)  AWS Console에서 Lambda -\u0026gt; Application -\u0026gt; cloud9-ImageResize 선택 Resource에서 ImageResize 선택 Actions 버튼을 클릭하고 Deploy to Lambda@Edge 선택 Distribution은 image thumbnail용 CloudFront ARN 입력 CloudFront Event는 Origin Response를 선택 Deploy 버튼 클릭  "
},
{
	"uri": "/ko/file/serverless/",
	"title": "서버리스 어플리케이션 구축",
	"tags": [],
	"description": "",
	"content": " 기본적으로 API Gateway, Lambda Function, Dynamo DB 등과 같은 자원은 SAM template을 통해서 자동으로 생성할 수 있습니다. SAM 프로젝트를 통해 기본적은 서버리스 환경을 구축합니다. 추가적으로 실시간 이미지 썸네일 생성을 위한 Lamdbda@Edge 함수와 동영상 스트리밍 파일 생성을 위한 Lambda 함수도 구현하여 AWS 환경에 배포합니다.\n  SAM 프로젝트 생성 실시간 이미지 썸네일 Lambda@Edge 함수 생성 동영상 스트리밍 파일 변환을 위한 Lambda 함수 생성  "
},
{
	"uri": "/ko/file/serverless/thumb/",
	"title": "실시간 이미지 썸네일 생성",
	"tags": [],
	"description": "",
	"content": " 본 실습은 Virginia (us-east-1) 리전에서 Cloud9 IDE 툴을 사용하여 진행합니다.\n 실시간 이미지 썸네일 vs 원본 이미지 파일 업로드 시, 썸네일 생성 기존 원본 이미지 파일을 업로드 시, 람다 함수를 통해 이벤트 방식으로 썸네일을 생성하는 경우에는 업로드된 원본 이미지 파일에 대한 썸네일이 필요하지 않을 경우에도 생성이 되며, 생성된 파일은 모두 S3에 저장이 됩니다. 더욱이 이벤트 방식으로 생성이 되기 때문에, 사용자 썸네일 요청이 미처 썸네일이 생성되기도 전에 호출이 된다면 사용자에게 제대로 된 썸네일을 내려줄 수 없는 이슈가 존재합니다.\n본 실습은 사용자가 썸네일 요청을 할 때, 실시간으로 이미지 썸네일을 생성하고, 생성된 썸네일을 사용자에게 전달하는 방식으로 실습을 진행합니다. 생성된 썸네일은 S3에 저장되는 게 아니라, CloudFront에 캐싱되도록 만들어서 S3 비용도 절약하면서 동시에 CloudFront 캐싱을 통한 응답 속도를 개선합니다.\nLambda@Edge 함수 고려해야할 점 Lambda@Edge 함수를 만들어서 특정 CloudFront에 배포할 경우, 아래와 같은 부분은 고려해야 합니다.\n 응답의 Body를 저작할 경우, 크기는 1MB를 넘어갈 수 없습니다. Node.js만 사용이 가능합니다. Virginia (us-east-1) 리전에서만 배포가 가능합니다.  "
},
{
	"uri": "/ko/file/api-test/",
	"title": "API 테스트",
	"tags": [],
	"description": "",
	"content": " API 테스트는 POSTMAN 툴을 이용하여 진행합니다.\n  이미지 관련 API 테스트 진행  비디오 관련 API 테스트 진행   "
},
{
	"uri": "/ko/file/api-test/video/",
	"title": "동영상 API 테스트",
	"tags": [],
	"description": "",
	"content": " API 테스트는 POSTMAN 툴을 이용하여 진행합니다.\n 아래와 같이 포스트맨을 통해 File 업로드 Pre-Signed URL을 발급받을 수 있는 REST API를 호출합니다. 해당 REST API를 호출하면, 파일을 업로드할 수 있는 Pre-Signed URL이 HTTP 응답으로 전달됩니다.\nS3 Upload Pre-Signed URL 발급 API Gateway EndPoint는 SAM Template에 의해 생성된 API Gateway Endpoint를 의미합니다. 예를 들어, jsatf3u5x5.execute-api.ap-northeast-2.amazonaws.com/Prod 와 같은 값이 될 수 있습니다.\nMethod : GET\rURL : https://[API Gateway EndPoint]/nfile/object?uid=uid1\u0026amp;sid=sid1\u0026amp;name=myvideo\u0026amp;type=vod\r바이너리 파일 업로드 앞 서 발급받은 S3 Upload Pre-Signed URL(body 안에 url 값)을 복사해서 아래와 같이 주소창에 붙여 넣습니다. 그리고 Body 탭을 클릭한 후, binary 버튼을 클릭하여 업로드할 동영상 파일을 하나 첨부합니다.\nMethod : PUT\rURL : https://signed-img-myid.s3.ap-northeast-2.amazonaws.com/sid001/uid001/f24ed80c-c163-4e1e-8965-d88928375236?X-Amz-Security-Token=...\r만료된 URL을 통한 동영상 파일 업로드 발급 받은 S3 Upload Pre-Signed URL을 람다 함수에서 설정한 만료 시간 이후로 업로드 시도할 경우, 아래와 같이 Access Denied (Request has expired) 에러가 응답으로 내려오게 됩니다. 스트리밍 파일 다운로드 S3 Upload Pre-Signed URL을 발급받기 위해 호출한 API의 응답으로부터 objectid 값(e.g., f24ed80c-c163-4e1e-8965-d88928375216)을 가져와서 아래와 같이 설정합니다.\nMethod : GET\rURL : https://[API Gateway EndPoint]/nfile/object/streaming/[objectid]?uid=uid001\u0026amp;sid=sid001\u0026amp;type=vod\r동영상 썸네일 다운로드 objectid 값을 가져와서 아래 URL을 호출합니다.\nMethod : GET\rURL : https://[API Gateway EndPoint]/nfile/object/thumb/[objectid]?uid=uid001\u0026amp;sid=sid001\u0026amp;type=vod\r"
},
{
	"uri": "/ko/file/serverless/streaming/",
	"title": "동영상 스트리밍 람다 생성",
	"tags": [],
	"description": "",
	"content": " 현재 페이지는 추후 제공될 예정입니다.\n "
},
{
	"uri": "/ko/file/infra/cf/cf_thumb/",
	"title": "이미지 썸네일용 CloudFront 생성",
	"tags": [],
	"description": "",
	"content": "CloudFront 메뉴로 진입하여 Create Distribution 버튼을 클릭합니다. Web 메뉴의 Get Started 버튼을 클릭합니다. CloudFront의 Signed URL 기능을 사용하여 파일을 다운로드 받기 위해 아래와 같은 설정 작업을 진행합니다. CloudFront의 Signed URL 및 Signed Cookies 기능을 더 자세히 알고자 하기 위해서는 AWS 공식 문서 를 참조하세요.\n 아래와 같이 CloudFront 설정 작업을 진행합니다.\n Origin Domain Name은 기존에 생성한 signed-img-[my_id] 버킷을 선택합니다. ([my_id]는 임의의 고유한 값을 입력합니다) Restrict Bucket Access는 Yes를 선택합니다. Origin Access Identity는 Use an Existing Identity를 선택합니다. Your Identities는 기존에 존재하는 access-identity-signed-img-[my_id].s3.amazon.com을 선택합니다. Grant Read Permission on Bucket은 No를 선택합니다. Object Caching은 Customize를 선택합니다. minimum TTL은 86500을 입력합니다. Restric Viewer Access는 Yes를 선택합니다. 마지막으로 제일 밑에 존재하는 Create Distribution 버튼을 클릭합니다.  현재 생성한 CloudFront에 추후 생성할 실시간 이미지 썸네일 생성 Lambda@Edge Function을 아래와 같이 적용할 예정입니다. 아래 설정은 추후 다시 설명 드릴 예정입니다.\n"
},
{
	"uri": "/ko/cleanup/",
	"title": "실습 리소스 정리",
	"tags": [],
	"description": "",
	"content": " 이 실습을 마치면 사용한 AWS 계정에 비용이 추가로 발생하지 않도록 사용한 리소스를 삭제해야 합니다. 리소스를 삭제하기 위해 기존의 Administrator (관리자) 계정으로 AWS 관리 콘솔에 로그인 합니다.\n "
},
{
	"uri": "/ko/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/ko/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/ko/credits/",
	"title": "크레딧",
	"tags": [],
	"description": "",
	"content": "패키지와 라이브러리  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  도구  Netlify - Continuous deployement and hosting of this documentation Hugo   제작: Daniel You\n"
}]